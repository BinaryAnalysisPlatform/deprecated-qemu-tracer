/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#ifndef PROTOBUF_C_frame_2epiqi_2eproto__INCLUDED
#define PROTOBUF_C_frame_2epiqi_2eproto__INCLUDED

#include <google/protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS


typedef struct _Frame Frame;
typedef struct _OperandValueList OperandValueList;
typedef struct _OperandInfo OperandInfo;
typedef struct _OperandInfoSpecific OperandInfoSpecific;
typedef struct _RegOperand RegOperand;
typedef struct _MemOperand MemOperand;
typedef struct _OperandUsage OperandUsage;
typedef struct _TaintInfo TaintInfo;
typedef struct _StdFrame StdFrame;
typedef struct _SyscallFrame SyscallFrame;
typedef struct _ArgumentList ArgumentList;
typedef struct _ExceptionFrame ExceptionFrame;
typedef struct _TaintIntroFrame TaintIntroFrame;
typedef struct _TaintIntroList TaintIntroList;
typedef struct _TaintIntro TaintIntro;
typedef struct _ModloadFrame ModloadFrame;
typedef struct _KeyFrame KeyFrame;
typedef struct _TaggedValueLists TaggedValueLists;
typedef struct _TaggedValueList TaggedValueList;
typedef struct _ValueSourceTag ValueSourceTag;
typedef struct _ValueList ValueList;
typedef struct _ValueInfo ValueInfo;


/* --- enums --- */


/* --- messages --- */

struct  _Frame
{
  ProtobufCMessage __base;
  StdFrame *std_frame;
  SyscallFrame *syscall_frame;
  ExceptionFrame *exception_frame;
  TaintIntroFrame *taint_intro_frame;
  ModloadFrame *modload_frame;
  KeyFrame *key_frame;
};
#define FRAME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&frame__descriptor) \
    , NULL, NULL, NULL, NULL, NULL, NULL }


struct  _OperandValueList
{
  ProtobufCMessage __base;
  size_t n_elem;
  OperandInfo **elem;
};
#define OPERAND_VALUE_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&operand_value_list__descriptor) \
    , 0,NULL }


struct  _OperandInfo
{
  ProtobufCMessage __base;
  OperandInfoSpecific *operand_info_specific;
  int32_t bit_length;
  OperandUsage *operand_usage;
  TaintInfo *taint_info;
  ProtobufCBinaryData value;
};
#define OPERAND_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&operand_info__descriptor) \
    , NULL, 0, NULL, NULL, {0,NULL} }


struct  _OperandInfoSpecific
{
  ProtobufCMessage __base;
  MemOperand *mem_operand;
  RegOperand *reg_operand;
};
#define OPERAND_INFO_SPECIFIC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&operand_info_specific__descriptor) \
    , NULL, NULL }


struct  _RegOperand
{
  ProtobufCMessage __base;
  char *name;
};
#define REG_OPERAND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&reg_operand__descriptor) \
    , NULL }


struct  _MemOperand
{
  ProtobufCMessage __base;
  uint64_t address;
};
#define MEM_OPERAND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mem_operand__descriptor) \
    , 0 }


struct  _OperandUsage
{
  ProtobufCMessage __base;
  protobuf_c_boolean read;
  protobuf_c_boolean written;
  protobuf_c_boolean index;
  protobuf_c_boolean base;
};
#define OPERAND_USAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&operand_usage__descriptor) \
    , 0, 0, 0, 0 }


struct  _TaintInfo
{
  ProtobufCMessage __base;
  protobuf_c_boolean has_no_taint;
  protobuf_c_boolean no_taint;
  protobuf_c_boolean has_taint_id;
  uint64_t taint_id;
  protobuf_c_boolean has_taint_multiple;
  protobuf_c_boolean taint_multiple;
};
#define TAINT_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&taint_info__descriptor) \
    , 0,0, 0,0, 0,0 }


struct  _StdFrame
{
  ProtobufCMessage __base;
  uint64_t address;
  uint64_t thread_id;
  ProtobufCBinaryData rawbytes;
  OperandValueList *operand_pre_list;
  OperandValueList *operand_post_list;
};
#define STD_FRAME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&std_frame__descriptor) \
    , 0, 0, {0,NULL}, NULL, NULL }


struct  _SyscallFrame
{
  ProtobufCMessage __base;
  uint64_t address;
  uint64_t thread_id;
  uint64_t number;
  ArgumentList *argument_list;
};
#define SYSCALL_FRAME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&syscall_frame__descriptor) \
    , 0, 0, 0, NULL }


struct  _ArgumentList
{
  ProtobufCMessage __base;
  size_t n_elem;
  int64_t *elem;
};
#define ARGUMENT_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&argument_list__descriptor) \
    , 0,NULL }


struct  _ExceptionFrame
{
  ProtobufCMessage __base;
  uint64_t exception_number;
  protobuf_c_boolean has_thread_id;
  uint64_t thread_id;
  protobuf_c_boolean has_from_addr;
  uint64_t from_addr;
  protobuf_c_boolean has_to_addr;
  uint64_t to_addr;
};
#define EXCEPTION_FRAME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&exception_frame__descriptor) \
    , 0, 0,0, 0,0, 0,0 }


struct  _TaintIntroFrame
{
  ProtobufCMessage __base;
  TaintIntroList *taint_intro_list;
};
#define TAINT_INTRO_FRAME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&taint_intro_frame__descriptor) \
    , NULL }


struct  _TaintIntroList
{
  ProtobufCMessage __base;
  size_t n_elem;
  TaintIntro **elem;
};
#define TAINT_INTRO_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&taint_intro_list__descriptor) \
    , 0,NULL }


struct  _TaintIntro
{
  ProtobufCMessage __base;
  uint64_t addr;
  uint64_t taint_id;
  protobuf_c_boolean has_value;
  ProtobufCBinaryData value;
  char *source_name;
  protobuf_c_boolean has_offset;
  uint64_t offset;
};
#define TAINT_INTRO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&taint_intro__descriptor) \
    , 0, 0, 0,{0,NULL}, NULL, 0,0 }


struct  _ModloadFrame
{
  ProtobufCMessage __base;
  char *module_name;
  uint64_t low_address;
  uint64_t high_address;
};
#define MODLOAD_FRAME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&modload_frame__descriptor) \
    , NULL, 0, 0 }


struct  _KeyFrame
{
  ProtobufCMessage __base;
  TaggedValueLists *tagged_value_lists;
};
#define KEY_FRAME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&key_frame__descriptor) \
    , NULL }


struct  _TaggedValueLists
{
  ProtobufCMessage __base;
  size_t n_elem;
  TaggedValueList **elem;
};
#define TAGGED_VALUE_LISTS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tagged_value_lists__descriptor) \
    , 0,NULL }


struct  _TaggedValueList
{
  ProtobufCMessage __base;
  ValueSourceTag *value_source_tag;
  ValueList *value_list;
};
#define TAGGED_VALUE_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tagged_value_list__descriptor) \
    , NULL, NULL }


struct  _ValueSourceTag
{
  ProtobufCMessage __base;
  protobuf_c_boolean has_no_thread_id;
  protobuf_c_boolean no_thread_id;
  protobuf_c_boolean has_thread_id;
  uint64_t thread_id;
};
#define VALUE_SOURCE_TAG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&value_source_tag__descriptor) \
    , 0,0, 0,0 }


struct  _ValueList
{
  ProtobufCMessage __base;
  size_t n_elem;
  ValueInfo **elem;
};
#define VALUE_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&value_list__descriptor) \
    , 0,NULL }


struct  _ValueInfo
{
  ProtobufCMessage __base;
  OperandInfoSpecific *operand_info_specific;
  int32_t bit_length;
  TaintInfo *taint_info;
  ProtobufCBinaryData value;
};
#define VALUE_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&value_info__descriptor) \
    , NULL, 0, NULL, {0,NULL} }


/* Frame methods */
void   frame__init
                     (Frame         *message);
size_t frame__get_packed_size
                     (const Frame   *message);
size_t frame__pack
                     (const Frame   *message,
                      uint8_t             *out);
size_t frame__pack_to_buffer
                     (const Frame   *message,
                      ProtobufCBuffer     *buffer);
Frame *
       frame__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   frame__free_unpacked
                     (Frame *message,
                      ProtobufCAllocator *allocator);
/* OperandValueList methods */
void   operand_value_list__init
                     (OperandValueList         *message);
size_t operand_value_list__get_packed_size
                     (const OperandValueList   *message);
size_t operand_value_list__pack
                     (const OperandValueList   *message,
                      uint8_t             *out);
size_t operand_value_list__pack_to_buffer
                     (const OperandValueList   *message,
                      ProtobufCBuffer     *buffer);
OperandValueList *
       operand_value_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   operand_value_list__free_unpacked
                     (OperandValueList *message,
                      ProtobufCAllocator *allocator);
/* OperandInfo methods */
void   operand_info__init
                     (OperandInfo         *message);
size_t operand_info__get_packed_size
                     (const OperandInfo   *message);
size_t operand_info__pack
                     (const OperandInfo   *message,
                      uint8_t             *out);
size_t operand_info__pack_to_buffer
                     (const OperandInfo   *message,
                      ProtobufCBuffer     *buffer);
OperandInfo *
       operand_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   operand_info__free_unpacked
                     (OperandInfo *message,
                      ProtobufCAllocator *allocator);
/* OperandInfoSpecific methods */
void   operand_info_specific__init
                     (OperandInfoSpecific         *message);
size_t operand_info_specific__get_packed_size
                     (const OperandInfoSpecific   *message);
size_t operand_info_specific__pack
                     (const OperandInfoSpecific   *message,
                      uint8_t             *out);
size_t operand_info_specific__pack_to_buffer
                     (const OperandInfoSpecific   *message,
                      ProtobufCBuffer     *buffer);
OperandInfoSpecific *
       operand_info_specific__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   operand_info_specific__free_unpacked
                     (OperandInfoSpecific *message,
                      ProtobufCAllocator *allocator);
/* RegOperand methods */
void   reg_operand__init
                     (RegOperand         *message);
size_t reg_operand__get_packed_size
                     (const RegOperand   *message);
size_t reg_operand__pack
                     (const RegOperand   *message,
                      uint8_t             *out);
size_t reg_operand__pack_to_buffer
                     (const RegOperand   *message,
                      ProtobufCBuffer     *buffer);
RegOperand *
       reg_operand__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   reg_operand__free_unpacked
                     (RegOperand *message,
                      ProtobufCAllocator *allocator);
/* MemOperand methods */
void   mem_operand__init
                     (MemOperand         *message);
size_t mem_operand__get_packed_size
                     (const MemOperand   *message);
size_t mem_operand__pack
                     (const MemOperand   *message,
                      uint8_t             *out);
size_t mem_operand__pack_to_buffer
                     (const MemOperand   *message,
                      ProtobufCBuffer     *buffer);
MemOperand *
       mem_operand__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mem_operand__free_unpacked
                     (MemOperand *message,
                      ProtobufCAllocator *allocator);
/* OperandUsage methods */
void   operand_usage__init
                     (OperandUsage         *message);
size_t operand_usage__get_packed_size
                     (const OperandUsage   *message);
size_t operand_usage__pack
                     (const OperandUsage   *message,
                      uint8_t             *out);
size_t operand_usage__pack_to_buffer
                     (const OperandUsage   *message,
                      ProtobufCBuffer     *buffer);
OperandUsage *
       operand_usage__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   operand_usage__free_unpacked
                     (OperandUsage *message,
                      ProtobufCAllocator *allocator);
/* TaintInfo methods */
void   taint_info__init
                     (TaintInfo         *message);
size_t taint_info__get_packed_size
                     (const TaintInfo   *message);
size_t taint_info__pack
                     (const TaintInfo   *message,
                      uint8_t             *out);
size_t taint_info__pack_to_buffer
                     (const TaintInfo   *message,
                      ProtobufCBuffer     *buffer);
TaintInfo *
       taint_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   taint_info__free_unpacked
                     (TaintInfo *message,
                      ProtobufCAllocator *allocator);
/* StdFrame methods */
void   std_frame__init
                     (StdFrame         *message);
size_t std_frame__get_packed_size
                     (const StdFrame   *message);
size_t std_frame__pack
                     (const StdFrame   *message,
                      uint8_t             *out);
size_t std_frame__pack_to_buffer
                     (const StdFrame   *message,
                      ProtobufCBuffer     *buffer);
StdFrame *
       std_frame__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   std_frame__free_unpacked
                     (StdFrame *message,
                      ProtobufCAllocator *allocator);
/* SyscallFrame methods */
void   syscall_frame__init
                     (SyscallFrame         *message);
size_t syscall_frame__get_packed_size
                     (const SyscallFrame   *message);
size_t syscall_frame__pack
                     (const SyscallFrame   *message,
                      uint8_t             *out);
size_t syscall_frame__pack_to_buffer
                     (const SyscallFrame   *message,
                      ProtobufCBuffer     *buffer);
SyscallFrame *
       syscall_frame__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   syscall_frame__free_unpacked
                     (SyscallFrame *message,
                      ProtobufCAllocator *allocator);
/* ArgumentList methods */
void   argument_list__init
                     (ArgumentList         *message);
size_t argument_list__get_packed_size
                     (const ArgumentList   *message);
size_t argument_list__pack
                     (const ArgumentList   *message,
                      uint8_t             *out);
size_t argument_list__pack_to_buffer
                     (const ArgumentList   *message,
                      ProtobufCBuffer     *buffer);
ArgumentList *
       argument_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   argument_list__free_unpacked
                     (ArgumentList *message,
                      ProtobufCAllocator *allocator);
/* ExceptionFrame methods */
void   exception_frame__init
                     (ExceptionFrame         *message);
size_t exception_frame__get_packed_size
                     (const ExceptionFrame   *message);
size_t exception_frame__pack
                     (const ExceptionFrame   *message,
                      uint8_t             *out);
size_t exception_frame__pack_to_buffer
                     (const ExceptionFrame   *message,
                      ProtobufCBuffer     *buffer);
ExceptionFrame *
       exception_frame__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   exception_frame__free_unpacked
                     (ExceptionFrame *message,
                      ProtobufCAllocator *allocator);
/* TaintIntroFrame methods */
void   taint_intro_frame__init
                     (TaintIntroFrame         *message);
size_t taint_intro_frame__get_packed_size
                     (const TaintIntroFrame   *message);
size_t taint_intro_frame__pack
                     (const TaintIntroFrame   *message,
                      uint8_t             *out);
size_t taint_intro_frame__pack_to_buffer
                     (const TaintIntroFrame   *message,
                      ProtobufCBuffer     *buffer);
TaintIntroFrame *
       taint_intro_frame__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   taint_intro_frame__free_unpacked
                     (TaintIntroFrame *message,
                      ProtobufCAllocator *allocator);
/* TaintIntroList methods */
void   taint_intro_list__init
                     (TaintIntroList         *message);
size_t taint_intro_list__get_packed_size
                     (const TaintIntroList   *message);
size_t taint_intro_list__pack
                     (const TaintIntroList   *message,
                      uint8_t             *out);
size_t taint_intro_list__pack_to_buffer
                     (const TaintIntroList   *message,
                      ProtobufCBuffer     *buffer);
TaintIntroList *
       taint_intro_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   taint_intro_list__free_unpacked
                     (TaintIntroList *message,
                      ProtobufCAllocator *allocator);
/* TaintIntro methods */
void   taint_intro__init
                     (TaintIntro         *message);
size_t taint_intro__get_packed_size
                     (const TaintIntro   *message);
size_t taint_intro__pack
                     (const TaintIntro   *message,
                      uint8_t             *out);
size_t taint_intro__pack_to_buffer
                     (const TaintIntro   *message,
                      ProtobufCBuffer     *buffer);
TaintIntro *
       taint_intro__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   taint_intro__free_unpacked
                     (TaintIntro *message,
                      ProtobufCAllocator *allocator);
/* ModloadFrame methods */
void   modload_frame__init
                     (ModloadFrame         *message);
size_t modload_frame__get_packed_size
                     (const ModloadFrame   *message);
size_t modload_frame__pack
                     (const ModloadFrame   *message,
                      uint8_t             *out);
size_t modload_frame__pack_to_buffer
                     (const ModloadFrame   *message,
                      ProtobufCBuffer     *buffer);
ModloadFrame *
       modload_frame__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   modload_frame__free_unpacked
                     (ModloadFrame *message,
                      ProtobufCAllocator *allocator);
/* KeyFrame methods */
void   key_frame__init
                     (KeyFrame         *message);
size_t key_frame__get_packed_size
                     (const KeyFrame   *message);
size_t key_frame__pack
                     (const KeyFrame   *message,
                      uint8_t             *out);
size_t key_frame__pack_to_buffer
                     (const KeyFrame   *message,
                      ProtobufCBuffer     *buffer);
KeyFrame *
       key_frame__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   key_frame__free_unpacked
                     (KeyFrame *message,
                      ProtobufCAllocator *allocator);
/* TaggedValueLists methods */
void   tagged_value_lists__init
                     (TaggedValueLists         *message);
size_t tagged_value_lists__get_packed_size
                     (const TaggedValueLists   *message);
size_t tagged_value_lists__pack
                     (const TaggedValueLists   *message,
                      uint8_t             *out);
size_t tagged_value_lists__pack_to_buffer
                     (const TaggedValueLists   *message,
                      ProtobufCBuffer     *buffer);
TaggedValueLists *
       tagged_value_lists__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tagged_value_lists__free_unpacked
                     (TaggedValueLists *message,
                      ProtobufCAllocator *allocator);
/* TaggedValueList methods */
void   tagged_value_list__init
                     (TaggedValueList         *message);
size_t tagged_value_list__get_packed_size
                     (const TaggedValueList   *message);
size_t tagged_value_list__pack
                     (const TaggedValueList   *message,
                      uint8_t             *out);
size_t tagged_value_list__pack_to_buffer
                     (const TaggedValueList   *message,
                      ProtobufCBuffer     *buffer);
TaggedValueList *
       tagged_value_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tagged_value_list__free_unpacked
                     (TaggedValueList *message,
                      ProtobufCAllocator *allocator);
/* ValueSourceTag methods */
void   value_source_tag__init
                     (ValueSourceTag         *message);
size_t value_source_tag__get_packed_size
                     (const ValueSourceTag   *message);
size_t value_source_tag__pack
                     (const ValueSourceTag   *message,
                      uint8_t             *out);
size_t value_source_tag__pack_to_buffer
                     (const ValueSourceTag   *message,
                      ProtobufCBuffer     *buffer);
ValueSourceTag *
       value_source_tag__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   value_source_tag__free_unpacked
                     (ValueSourceTag *message,
                      ProtobufCAllocator *allocator);
/* ValueList methods */
void   value_list__init
                     (ValueList         *message);
size_t value_list__get_packed_size
                     (const ValueList   *message);
size_t value_list__pack
                     (const ValueList   *message,
                      uint8_t             *out);
size_t value_list__pack_to_buffer
                     (const ValueList   *message,
                      ProtobufCBuffer     *buffer);
ValueList *
       value_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   value_list__free_unpacked
                     (ValueList *message,
                      ProtobufCAllocator *allocator);
/* ValueInfo methods */
void   value_info__init
                     (ValueInfo         *message);
size_t value_info__get_packed_size
                     (const ValueInfo   *message);
size_t value_info__pack
                     (const ValueInfo   *message,
                      uint8_t             *out);
size_t value_info__pack_to_buffer
                     (const ValueInfo   *message,
                      ProtobufCBuffer     *buffer);
ValueInfo *
       value_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   value_info__free_unpacked
                     (ValueInfo *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Frame_Closure)
                 (const Frame *message,
                  void *closure_data);
typedef void (*OperandValueList_Closure)
                 (const OperandValueList *message,
                  void *closure_data);
typedef void (*OperandInfo_Closure)
                 (const OperandInfo *message,
                  void *closure_data);
typedef void (*OperandInfoSpecific_Closure)
                 (const OperandInfoSpecific *message,
                  void *closure_data);
typedef void (*RegOperand_Closure)
                 (const RegOperand *message,
                  void *closure_data);
typedef void (*MemOperand_Closure)
                 (const MemOperand *message,
                  void *closure_data);
typedef void (*OperandUsage_Closure)
                 (const OperandUsage *message,
                  void *closure_data);
typedef void (*TaintInfo_Closure)
                 (const TaintInfo *message,
                  void *closure_data);
typedef void (*StdFrame_Closure)
                 (const StdFrame *message,
                  void *closure_data);
typedef void (*SyscallFrame_Closure)
                 (const SyscallFrame *message,
                  void *closure_data);
typedef void (*ArgumentList_Closure)
                 (const ArgumentList *message,
                  void *closure_data);
typedef void (*ExceptionFrame_Closure)
                 (const ExceptionFrame *message,
                  void *closure_data);
typedef void (*TaintIntroFrame_Closure)
                 (const TaintIntroFrame *message,
                  void *closure_data);
typedef void (*TaintIntroList_Closure)
                 (const TaintIntroList *message,
                  void *closure_data);
typedef void (*TaintIntro_Closure)
                 (const TaintIntro *message,
                  void *closure_data);
typedef void (*ModloadFrame_Closure)
                 (const ModloadFrame *message,
                  void *closure_data);
typedef void (*KeyFrame_Closure)
                 (const KeyFrame *message,
                  void *closure_data);
typedef void (*TaggedValueLists_Closure)
                 (const TaggedValueLists *message,
                  void *closure_data);
typedef void (*TaggedValueList_Closure)
                 (const TaggedValueList *message,
                  void *closure_data);
typedef void (*ValueSourceTag_Closure)
                 (const ValueSourceTag *message,
                  void *closure_data);
typedef void (*ValueList_Closure)
                 (const ValueList *message,
                  void *closure_data);
typedef void (*ValueInfo_Closure)
                 (const ValueInfo *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor frame__descriptor;
extern const ProtobufCMessageDescriptor operand_value_list__descriptor;
extern const ProtobufCMessageDescriptor operand_info__descriptor;
extern const ProtobufCMessageDescriptor operand_info_specific__descriptor;
extern const ProtobufCMessageDescriptor reg_operand__descriptor;
extern const ProtobufCMessageDescriptor mem_operand__descriptor;
extern const ProtobufCMessageDescriptor operand_usage__descriptor;
extern const ProtobufCMessageDescriptor taint_info__descriptor;
extern const ProtobufCMessageDescriptor std_frame__descriptor;
extern const ProtobufCMessageDescriptor syscall_frame__descriptor;
extern const ProtobufCMessageDescriptor argument_list__descriptor;
extern const ProtobufCMessageDescriptor exception_frame__descriptor;
extern const ProtobufCMessageDescriptor taint_intro_frame__descriptor;
extern const ProtobufCMessageDescriptor taint_intro_list__descriptor;
extern const ProtobufCMessageDescriptor taint_intro__descriptor;
extern const ProtobufCMessageDescriptor modload_frame__descriptor;
extern const ProtobufCMessageDescriptor key_frame__descriptor;
extern const ProtobufCMessageDescriptor tagged_value_lists__descriptor;
extern const ProtobufCMessageDescriptor tagged_value_list__descriptor;
extern const ProtobufCMessageDescriptor value_source_tag__descriptor;
extern const ProtobufCMessageDescriptor value_list__descriptor;
extern const ProtobufCMessageDescriptor value_info__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_frame_2epiqi_2eproto__INCLUDED */
